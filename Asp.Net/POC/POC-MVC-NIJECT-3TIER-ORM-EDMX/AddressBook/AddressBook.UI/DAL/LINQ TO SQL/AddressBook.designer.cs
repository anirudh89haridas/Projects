#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AddressBook.DAL.LINQ_TO_SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AddressBook")]
	public partial class AddressBookDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCountryMaster(CountryMaster instance);
    partial void UpdateCountryMaster(CountryMaster instance);
    partial void DeleteCountryMaster(CountryMaster instance);
    partial void InsertHobbyAddress(HobbyAddress instance);
    partial void UpdateHobbyAddress(HobbyAddress instance);
    partial void DeleteHobbyAddress(HobbyAddress instance);
    partial void InsertHobbyMaster(HobbyMaster instance);
    partial void UpdateHobbyMaster(HobbyMaster instance);
    partial void DeleteHobbyMaster(HobbyMaster instance);
    partial void InsertLanguageAddress(LanguageAddress instance);
    partial void UpdateLanguageAddress(LanguageAddress instance);
    partial void DeleteLanguageAddress(LanguageAddress instance);
    partial void InsertLanguageMaster(LanguageMaster instance);
    partial void UpdateLanguageMaster(LanguageMaster instance);
    partial void DeleteLanguageMaster(LanguageMaster instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPersonAddress(PersonAddress instance);
    partial void UpdatePersonAddress(PersonAddress instance);
    partial void DeletePersonAddress(PersonAddress instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertStateMaster(StateMaster instance);
    partial void UpdateStateMaster(StateMaster instance);
    partial void DeleteStateMaster(StateMaster instance);
    #endregion
		
		public AddressBookDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AddressBookConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AddressBookDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AddressBookDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AddressBookDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AddressBookDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CountryMaster> CountryMasters
		{
			get
			{
				return this.GetTable<CountryMaster>();
			}
		}
		
		public System.Data.Linq.Table<HobbyAddress> HobbyAddresses
		{
			get
			{
				return this.GetTable<HobbyAddress>();
			}
		}
		
		public System.Data.Linq.Table<HobbyMaster> HobbyMasters
		{
			get
			{
				return this.GetTable<HobbyMaster>();
			}
		}
		
		public System.Data.Linq.Table<LanguageAddress> LanguageAddresses
		{
			get
			{
				return this.GetTable<LanguageAddress>();
			}
		}
		
		public System.Data.Linq.Table<LanguageMaster> LanguageMasters
		{
			get
			{
				return this.GetTable<LanguageMaster>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PersonAddress> PersonAddresses
		{
			get
			{
				return this.GetTable<PersonAddress>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<StateMaster> StateMasters
		{
			get
			{
				return this.GetTable<StateMaster>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CountryMaster")]
	public partial class CountryMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _CountryName;
		
		private EntitySet<StateMaster> _StateMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public CountryMaster()
		{
			this._StateMasters = new EntitySet<StateMaster>(new Action<StateMaster>(this.attach_StateMasters), new Action<StateMaster>(this.detach_StateMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryMaster_StateMaster", Storage="_StateMasters", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<StateMaster> StateMasters
		{
			get
			{
				return this._StateMasters;
			}
			set
			{
				this._StateMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StateMasters(StateMaster entity)
		{
			this.SendPropertyChanging();
			entity.CountryMaster = this;
		}
		
		private void detach_StateMasters(StateMaster entity)
		{
			this.SendPropertyChanging();
			entity.CountryMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HobbyAddress")]
	public partial class HobbyAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HobbyAddressID;
		
		private int _PersonAddressID;
		
		private int _HobbyID;
		
		private EntityRef<HobbyMaster> _HobbyMaster;
		
		private EntityRef<PersonAddress> _PersonAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHobbyAddressIDChanging(int value);
    partial void OnHobbyAddressIDChanged();
    partial void OnPersonAddressIDChanging(int value);
    partial void OnPersonAddressIDChanged();
    partial void OnHobbyIDChanging(int value);
    partial void OnHobbyIDChanged();
    #endregion
		
		public HobbyAddress()
		{
			this._HobbyMaster = default(EntityRef<HobbyMaster>);
			this._PersonAddress = default(EntityRef<PersonAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HobbyAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HobbyAddressID
		{
			get
			{
				return this._HobbyAddressID;
			}
			set
			{
				if ((this._HobbyAddressID != value))
				{
					this.OnHobbyAddressIDChanging(value);
					this.SendPropertyChanging();
					this._HobbyAddressID = value;
					this.SendPropertyChanged("HobbyAddressID");
					this.OnHobbyAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAddressID", DbType="Int NOT NULL")]
		public int PersonAddressID
		{
			get
			{
				return this._PersonAddressID;
			}
			set
			{
				if ((this._PersonAddressID != value))
				{
					if (this._PersonAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAddressIDChanging(value);
					this.SendPropertyChanging();
					this._PersonAddressID = value;
					this.SendPropertyChanged("PersonAddressID");
					this.OnPersonAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HobbyID", DbType="Int NOT NULL")]
		public int HobbyID
		{
			get
			{
				return this._HobbyID;
			}
			set
			{
				if ((this._HobbyID != value))
				{
					if (this._HobbyMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHobbyIDChanging(value);
					this.SendPropertyChanging();
					this._HobbyID = value;
					this.SendPropertyChanged("HobbyID");
					this.OnHobbyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HobbyMaster_HobbyAddress", Storage="_HobbyMaster", ThisKey="HobbyID", OtherKey="HobbyID", IsForeignKey=true)]
		public HobbyMaster HobbyMaster
		{
			get
			{
				return this._HobbyMaster.Entity;
			}
			set
			{
				HobbyMaster previousValue = this._HobbyMaster.Entity;
				if (((previousValue != value) 
							|| (this._HobbyMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HobbyMaster.Entity = null;
						previousValue.HobbyAddresses.Remove(this);
					}
					this._HobbyMaster.Entity = value;
					if ((value != null))
					{
						value.HobbyAddresses.Add(this);
						this._HobbyID = value.HobbyID;
					}
					else
					{
						this._HobbyID = default(int);
					}
					this.SendPropertyChanged("HobbyMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAddress_HobbyAddress", Storage="_PersonAddress", ThisKey="PersonAddressID", OtherKey="PersonAddressID", IsForeignKey=true)]
		public PersonAddress PersonAddress
		{
			get
			{
				return this._PersonAddress.Entity;
			}
			set
			{
				PersonAddress previousValue = this._PersonAddress.Entity;
				if (((previousValue != value) 
							|| (this._PersonAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonAddress.Entity = null;
						previousValue.HobbyAddresses.Remove(this);
					}
					this._PersonAddress.Entity = value;
					if ((value != null))
					{
						value.HobbyAddresses.Add(this);
						this._PersonAddressID = value.PersonAddressID;
					}
					else
					{
						this._PersonAddressID = default(int);
					}
					this.SendPropertyChanged("PersonAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HobbyMaster")]
	public partial class HobbyMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HobbyID;
		
		private string _HobbyName;
		
		private EntitySet<HobbyAddress> _HobbyAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHobbyIDChanging(int value);
    partial void OnHobbyIDChanged();
    partial void OnHobbyNameChanging(string value);
    partial void OnHobbyNameChanged();
    #endregion
		
		public HobbyMaster()
		{
			this._HobbyAddresses = new EntitySet<HobbyAddress>(new Action<HobbyAddress>(this.attach_HobbyAddresses), new Action<HobbyAddress>(this.detach_HobbyAddresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HobbyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HobbyID
		{
			get
			{
				return this._HobbyID;
			}
			set
			{
				if ((this._HobbyID != value))
				{
					this.OnHobbyIDChanging(value);
					this.SendPropertyChanging();
					this._HobbyID = value;
					this.SendPropertyChanged("HobbyID");
					this.OnHobbyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HobbyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HobbyName
		{
			get
			{
				return this._HobbyName;
			}
			set
			{
				if ((this._HobbyName != value))
				{
					this.OnHobbyNameChanging(value);
					this.SendPropertyChanging();
					this._HobbyName = value;
					this.SendPropertyChanged("HobbyName");
					this.OnHobbyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HobbyMaster_HobbyAddress", Storage="_HobbyAddresses", ThisKey="HobbyID", OtherKey="HobbyID")]
		public EntitySet<HobbyAddress> HobbyAddresses
		{
			get
			{
				return this._HobbyAddresses;
			}
			set
			{
				this._HobbyAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HobbyAddresses(HobbyAddress entity)
		{
			this.SendPropertyChanging();
			entity.HobbyMaster = this;
		}
		
		private void detach_HobbyAddresses(HobbyAddress entity)
		{
			this.SendPropertyChanging();
			entity.HobbyMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LanguageAddress")]
	public partial class LanguageAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageAddressID;
		
		private int _PersonAddressID;
		
		private int _LanguageID;
		
		private EntityRef<LanguageMaster> _LanguageMaster;
		
		private EntityRef<PersonAddress> _PersonAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageAddressIDChanging(int value);
    partial void OnLanguageAddressIDChanged();
    partial void OnPersonAddressIDChanging(int value);
    partial void OnPersonAddressIDChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    #endregion
		
		public LanguageAddress()
		{
			this._LanguageMaster = default(EntityRef<LanguageMaster>);
			this._PersonAddress = default(EntityRef<PersonAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageAddressID
		{
			get
			{
				return this._LanguageAddressID;
			}
			set
			{
				if ((this._LanguageAddressID != value))
				{
					this.OnLanguageAddressIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageAddressID = value;
					this.SendPropertyChanged("LanguageAddressID");
					this.OnLanguageAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAddressID", DbType="Int NOT NULL")]
		public int PersonAddressID
		{
			get
			{
				return this._PersonAddressID;
			}
			set
			{
				if ((this._PersonAddressID != value))
				{
					if (this._PersonAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAddressIDChanging(value);
					this.SendPropertyChanging();
					this._PersonAddressID = value;
					this.SendPropertyChanged("PersonAddressID");
					this.OnPersonAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					if (this._LanguageMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LanguageMaster_LanguageAddress", Storage="_LanguageMaster", ThisKey="LanguageID", OtherKey="LanguageID", IsForeignKey=true)]
		public LanguageMaster LanguageMaster
		{
			get
			{
				return this._LanguageMaster.Entity;
			}
			set
			{
				LanguageMaster previousValue = this._LanguageMaster.Entity;
				if (((previousValue != value) 
							|| (this._LanguageMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LanguageMaster.Entity = null;
						previousValue.LanguageAddresses.Remove(this);
					}
					this._LanguageMaster.Entity = value;
					if ((value != null))
					{
						value.LanguageAddresses.Add(this);
						this._LanguageID = value.LanguageID;
					}
					else
					{
						this._LanguageID = default(int);
					}
					this.SendPropertyChanged("LanguageMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAddress_LanguageAddress", Storage="_PersonAddress", ThisKey="PersonAddressID", OtherKey="PersonAddressID", IsForeignKey=true)]
		public PersonAddress PersonAddress
		{
			get
			{
				return this._PersonAddress.Entity;
			}
			set
			{
				PersonAddress previousValue = this._PersonAddress.Entity;
				if (((previousValue != value) 
							|| (this._PersonAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonAddress.Entity = null;
						previousValue.LanguageAddresses.Remove(this);
					}
					this._PersonAddress.Entity = value;
					if ((value != null))
					{
						value.LanguageAddresses.Add(this);
						this._PersonAddressID = value.PersonAddressID;
					}
					else
					{
						this._PersonAddressID = default(int);
					}
					this.SendPropertyChanged("PersonAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LanguageMaster")]
	public partial class LanguageMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageID;
		
		private string _LanguageName;
		
		private EntitySet<LanguageAddress> _LanguageAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnLanguageNameChanging(string value);
    partial void OnLanguageNameChanged();
    #endregion
		
		public LanguageMaster()
		{
			this._LanguageAddresses = new EntitySet<LanguageAddress>(new Action<LanguageAddress>(this.attach_LanguageAddresses), new Action<LanguageAddress>(this.detach_LanguageAddresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LanguageName
		{
			get
			{
				return this._LanguageName;
			}
			set
			{
				if ((this._LanguageName != value))
				{
					this.OnLanguageNameChanging(value);
					this.SendPropertyChanging();
					this._LanguageName = value;
					this.SendPropertyChanged("LanguageName");
					this.OnLanguageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LanguageMaster_LanguageAddress", Storage="_LanguageAddresses", ThisKey="LanguageID", OtherKey="LanguageID")]
		public EntitySet<LanguageAddress> LanguageAddresses
		{
			get
			{
				return this._LanguageAddresses;
			}
			set
			{
				this._LanguageAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LanguageAddresses(LanguageAddress entity)
		{
			this.SendPropertyChanging();
			entity.LanguageMaster = this;
		}
		
		private void detach_LanguageAddresses(LanguageAddress entity)
		{
			this.SendPropertyChanging();
			entity.LanguageMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private int _RoleID;
		
		private int _PersonID;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public Permission()
		{
			this._Person = default(EntityRef<Person>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Permission", Storage="_Person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Permission", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonID;
		
		private int _PersonAddressID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<Permission> _Permissions;
		
		private EntityRef<PersonAddress> _PersonAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnPersonAddressIDChanging(int value);
    partial void OnPersonAddressIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Person()
		{
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._PersonAddress = default(EntityRef<PersonAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAddressID", DbType="Int NOT NULL")]
		public int PersonAddressID
		{
			get
			{
				return this._PersonAddressID;
			}
			set
			{
				if ((this._PersonAddressID != value))
				{
					if (this._PersonAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonAddressIDChanging(value);
					this.SendPropertyChanging();
					this._PersonAddressID = value;
					this.SendPropertyChanged("PersonAddressID");
					this.OnPersonAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Permission", Storage="_Permissions", ThisKey="PersonID", OtherKey="PersonID")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAddress_Person", Storage="_PersonAddress", ThisKey="PersonAddressID", OtherKey="PersonAddressID", IsForeignKey=true)]
		public PersonAddress PersonAddress
		{
			get
			{
				return this._PersonAddress.Entity;
			}
			set
			{
				PersonAddress previousValue = this._PersonAddress.Entity;
				if (((previousValue != value) 
							|| (this._PersonAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PersonAddress.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._PersonAddress.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._PersonAddressID = value.PersonAddressID;
					}
					else
					{
						this._PersonAddressID = default(int);
					}
					this.SendPropertyChanged("PersonAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonAddress")]
	public partial class PersonAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonAddressID;
		
		private int _StateID;
		
		private long _PhoneNumber;
		
		private string _CompleteAddress;
		
		private string _PinCode;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _Gender;
		
		private string _PhotoName;
		
		private EntitySet<HobbyAddress> _HobbyAddresses;
		
		private EntitySet<LanguageAddress> _LanguageAddresses;
		
		private EntitySet<Person> _Persons;
		
		private EntityRef<StateMaster> _StateMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonAddressIDChanging(int value);
    partial void OnPersonAddressIDChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnPhoneNumberChanging(long value);
    partial void OnPhoneNumberChanged();
    partial void OnCompleteAddressChanging(string value);
    partial void OnCompleteAddressChanged();
    partial void OnPinCodeChanging(string value);
    partial void OnPinCodeChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnPhotoNameChanging(string value);
    partial void OnPhotoNameChanged();
    #endregion
		
		public PersonAddress()
		{
			this._HobbyAddresses = new EntitySet<HobbyAddress>(new Action<HobbyAddress>(this.attach_HobbyAddresses), new Action<HobbyAddress>(this.detach_HobbyAddresses));
			this._LanguageAddresses = new EntitySet<LanguageAddress>(new Action<LanguageAddress>(this.attach_LanguageAddresses), new Action<LanguageAddress>(this.detach_LanguageAddresses));
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._StateMaster = default(EntityRef<StateMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonAddressID
		{
			get
			{
				return this._PersonAddressID;
			}
			set
			{
				if ((this._PersonAddressID != value))
				{
					this.OnPersonAddressIDChanging(value);
					this.SendPropertyChanging();
					this._PersonAddressID = value;
					this.SendPropertyChanged("PersonAddressID");
					this.OnPersonAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._StateMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="BigInt NOT NULL")]
		public long PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompleteAddress", DbType="VarChar(200)")]
		public string CompleteAddress
		{
			get
			{
				return this._CompleteAddress;
			}
			set
			{
				if ((this._CompleteAddress != value))
				{
					this.OnCompleteAddressChanging(value);
					this.SendPropertyChanging();
					this._CompleteAddress = value;
					this.SendPropertyChanged("CompleteAddress");
					this.OnCompleteAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PinCode", DbType="VarChar(15)")]
		public string PinCode
		{
			get
			{
				return this._PinCode;
			}
			set
			{
				if ((this._PinCode != value))
				{
					this.OnPinCodeChanging(value);
					this.SendPropertyChanging();
					this._PinCode = value;
					this.SendPropertyChanged("PinCode");
					this.OnPinCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoName", DbType="VarChar(50)")]
		public string PhotoName
		{
			get
			{
				return this._PhotoName;
			}
			set
			{
				if ((this._PhotoName != value))
				{
					this.OnPhotoNameChanging(value);
					this.SendPropertyChanging();
					this._PhotoName = value;
					this.SendPropertyChanged("PhotoName");
					this.OnPhotoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAddress_HobbyAddress", Storage="_HobbyAddresses", ThisKey="PersonAddressID", OtherKey="PersonAddressID")]
		public EntitySet<HobbyAddress> HobbyAddresses
		{
			get
			{
				return this._HobbyAddresses;
			}
			set
			{
				this._HobbyAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAddress_LanguageAddress", Storage="_LanguageAddresses", ThisKey="PersonAddressID", OtherKey="PersonAddressID")]
		public EntitySet<LanguageAddress> LanguageAddresses
		{
			get
			{
				return this._LanguageAddresses;
			}
			set
			{
				this._LanguageAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PersonAddress_Person", Storage="_Persons", ThisKey="PersonAddressID", OtherKey="PersonAddressID")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateMaster_PersonAddress", Storage="_StateMaster", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public StateMaster StateMaster
		{
			get
			{
				return this._StateMaster.Entity;
			}
			set
			{
				StateMaster previousValue = this._StateMaster.Entity;
				if (((previousValue != value) 
							|| (this._StateMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateMaster.Entity = null;
						previousValue.PersonAddresses.Remove(this);
					}
					this._StateMaster.Entity = value;
					if ((value != null))
					{
						value.PersonAddresses.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("StateMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HobbyAddresses(HobbyAddress entity)
		{
			this.SendPropertyChanging();
			entity.PersonAddress = this;
		}
		
		private void detach_HobbyAddresses(HobbyAddress entity)
		{
			this.SendPropertyChanging();
			entity.PersonAddress = null;
		}
		
		private void attach_LanguageAddresses(LanguageAddress entity)
		{
			this.SendPropertyChanging();
			entity.PersonAddress = this;
		}
		
		private void detach_LanguageAddresses(LanguageAddress entity)
		{
			this.SendPropertyChanging();
			entity.PersonAddress = null;
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonAddress = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.PersonAddress = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private EntitySet<Permission> _Permissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Permission", Storage="_Permissions", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateMaster")]
	public partial class StateMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateID;
		
		private int _CountryID;
		
		private string _StateName;
		
		private EntitySet<PersonAddress> _PersonAddresses;
		
		private EntityRef<CountryMaster> _CountryMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    #endregion
		
		public StateMaster()
		{
			this._PersonAddresses = new EntitySet<PersonAddress>(new Action<PersonAddress>(this.attach_PersonAddresses), new Action<PersonAddress>(this.detach_PersonAddresses));
			this._CountryMaster = default(EntityRef<CountryMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._CountryMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateMaster_PersonAddress", Storage="_PersonAddresses", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<PersonAddress> PersonAddresses
		{
			get
			{
				return this._PersonAddresses;
			}
			set
			{
				this._PersonAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryMaster_StateMaster", Storage="_CountryMaster", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public CountryMaster CountryMaster
		{
			get
			{
				return this._CountryMaster.Entity;
			}
			set
			{
				CountryMaster previousValue = this._CountryMaster.Entity;
				if (((previousValue != value) 
							|| (this._CountryMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryMaster.Entity = null;
						previousValue.StateMasters.Remove(this);
					}
					this._CountryMaster.Entity = value;
					if ((value != null))
					{
						value.StateMasters.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("CountryMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PersonAddresses(PersonAddress entity)
		{
			this.SendPropertyChanging();
			entity.StateMaster = this;
		}
		
		private void detach_PersonAddresses(PersonAddress entity)
		{
			this.SendPropertyChanging();
			entity.StateMaster = null;
		}
	}
}
#pragma warning restore 1591
